{"version":3,"sources":["Routes/Nav.js","services/services.js","components/AddDeviceInputFields.js","components/AddDevice.js","components/ViewDevices.js","components/AssignDevice.js","components/AssignDeviceId.js","components/SubmitDevice.js","components/Devices.js","components/AvailableDevices.js","components/AllotedDevices.js","components/SubmittedList.js","components/EditDevice.js","components/EditSubmitList.js","components/DeviceScreen.js","components/InventoryScreen.js","Routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","children","data","lastDeviceId","a","fetch","method","headers","body","JSON","stringify","device","response","getDevices","json","getAssignedDevices","allotDevice","index","subDevice","getSubmitedDevices","id","AddDeviceInputField","useState","deviceId","setDeviceId","deviceSrNo","setDeviceSrNo","deviceName","setDeviceName","deviceType","setDeviceType","setLastDeviceId","useEffect","getLastDeviceId","then","res","type","onChange","e","target","value","name","placeholder","onClick","srNo","lastId","parseInt","substring","toString","padStart","console","log","addDevice","alert","AddDevice","ViewDetails","devices","setDevices","history","useHistory","editClicked","item","push","map","nextItem","key","bind","this","AssignDevice","editDevice","assignedTo","setAssignedTo","assignedDate","assignedBy","setAssignedBy","setAssignDate","updateAlottedDevice","assignDevice","window","location","reload","delAllotedDevice","AssignDeviceId","match","params","assignedDevices","setAssignedDevices","check","setCheck","setEditDevice","deviceAssigned","find","edit","assignedSuccessfully","SubmitDevice","subDate","setSubDate","findDevice","indexOf","submitDevice","Devices","AvailableDevices","availableDevices","setAvailableDevices","available","forEach","element","assign","AllotedDevices","displayedAssignedDevices","setDisplayedAssignedDevices","refresh","setRefresh","alloted","object","submittedDevices","setSubmittedDevices","displayedSubmittedDevice","setDisplayedSubmittedDevice","submitted","submitDate","EditDevice","dev","dltDevice","EditSubmitList","setSubmitDate","setSubmitDevice","updateSubmitDevice","delsubmittedDevice","DeviceScreen","InventoryScreen","SubmittedList","routes","to","exact","path","component","ViewDevices","EditSubmitDevice","App","Routes","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6409771f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Nav.css'\r\nconst Nav = (props) =>{\r\n    const toAvailableDevice = () => {\r\n        \r\n    }\r\n    return(\r\n        \r\n        <div className=\"topnav\">\r\n            {props.children}\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Nav;","export async function addDevice(data,lastDeviceId) {\r\n\r\n    const response = await fetch(`/api/addDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({device: data,lastDeviceId:lastDeviceId})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function getDevices() {\r\n\r\n    const response = await fetch('/api/devices');\r\n    return await response.json();\r\n}\r\n\r\nexport async function getLastDeviceId() {\r\n\r\n    const response = await fetch('/api/getLastId');\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport async function getAssignedDevices() {\r\n\r\n    const response = await fetch('/api/getAssignedDevices');\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport async function assignDevice(device) {\r\n    const response = await fetch(`/api/assignDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({allotDevice:device})\r\n      })\r\n    return await response;\r\n}\r\nexport async function submitDevice(device,index) {\r\n    const response = await fetch(`/api/submitDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({subDevice:device,index:index})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function getSubmitedDevices() {\r\n\r\n    const response = await fetch('/api/getSubmitedDevices');\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport async function editDevice(data){\r\n    const response = await fetch(`/api/updateDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({device:data})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function dltDevice(id){\r\n    const response = await fetch(`/api/deleteDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({id:id})\r\n      })\r\n    return await response;\r\n}\r\n\r\n\r\nexport async function updateAlottedDevice(device){\r\n    const response = await fetch(`/api/updateAllotedDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({device:device})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function delAllotedDevice(id){\r\n    const response = await fetch(`/api/delAllotedDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({id:id})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function delsubmittedDevice(id){\r\n    const response = await fetch(`/api/delsubmittedDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({id:id})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function updateSubmitDevice(data){\r\n    const response = await fetch(`/api/updateSubmitDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({data:data})\r\n      })\r\n    return await response;\r\n}\r\n","import React,{useState,useEffect} from 'react';\r\n\r\nimport {addDevice,getLastDeviceId} from '../services/services';\r\n\r\n\r\nconst AddDeviceInputField = (props) =>{\r\n\r\n    \r\n    const [deviceId,setDeviceId] = useState();\r\n    const [deviceSrNo,setDeviceSrNo] = useState('');\r\n    const [deviceName,setDeviceName] = useState('');\r\n    const [deviceType,setDeviceType] = useState('');\r\n\r\n    const [lastDeviceId,setLastDeviceId]=useState();\r\n\r\n    useEffect(()=>{getLastDeviceId().then(res=>{\r\n        \r\n        \r\n        setLastDeviceId(res)\r\n        setDeviceId(res)\r\n        \r\n       \r\n    })},[deviceId])\r\n\r\n    const addDvice = () => {\r\n        if(!deviceSrNo || !deviceType || !deviceName){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n        const data={id:lastDeviceId,name:deviceName,srNo:deviceSrNo,type:deviceType}\r\n        let numOfLastId=parseInt(lastDeviceId.substring(1,5))+1;\r\n        const lastId=\"a\"+numOfLastId.toString().padStart(4, \"0\") \r\n        console.log('add')\r\n        addDevice(data,lastId);\r\n        setDeviceId(lastId)\r\n        setDeviceSrNo('');\r\n        setDeviceType('');\r\n        setDeviceName('');\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div>\r\n                Device Id &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  {deviceId}\r\n            </div>\r\n            \r\n            <div>\r\n                Device Sr. No.   &nbsp;\r\n                <input type=\"text\" onChange={(e) => setDeviceSrNo(e.target.value)}   value={deviceSrNo} name=\"Sr. No.\" id=\"firstname\"  placeholder=\"Device Sr. No.\" />\r\n            </div>\r\n            <div>\r\n                Device Name.&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setDeviceName(e.target.value)}   value={deviceName} name=\"device name\" id=\"devicename\"  placeholder=\"Device Name\" />\r\n            </div>\r\n            <div>\r\n                Device Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setDeviceType(e.target.value)}  value={deviceType} name=\"type\" id=\"device type\"  placeholder=\"Device Type\" />\r\n            </div>\r\n            <button onClick={addDvice}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddDeviceInputField;","import React, { useState,useEffect } from 'react';\r\nimport AddDeviceInputField from './AddDeviceInputFields'\r\n\r\nconst AddDevice = () =>{\r\n    \r\n    return(\r\n        <div>\r\n            <AddDeviceInputField />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddDevice;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices } from '../services/services';\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst ViewDetails = (props) => {\r\n    const [devices, setDevices] = useState()\r\n    useEffect(() => { getDevices().then(res => setDevices(res)) }, [])\r\n    const history=useHistory();\r\n    const editClicked=(item)=>{\r\n        history.push(`/editDevice/${item.id}`)\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {devices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        devices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.type}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td onClick={editClicked.bind(this,nextItem)}>Edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewDetails;","import React, { useState, useEffect } from  'react';\r\n\r\nimport {assignDevice,updateAlottedDevice,delAllotedDevice} from '../services/services'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst AssignDevice = (props) => {\r\n    console.log(props.editDevice)\r\n    const [assignedTo,setAssignedTo] =useState(props.editDevice?props.editDevice.assignedTo:'');\r\n    const [assignedBy,setAssignedBy]=useState(props.editDevice?props.editDevice.assignedDate:'')\r\n    const [assignedDate,setAssignDate] =useState(props.editDevice?props.editDevice.assignedBy:'')\r\n    const history=useHistory();\r\n    const assign = () =>{\r\n        if(!assignedTo || !assignedBy || !assignedDate){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n        const data={\r\n            id:props.id,\r\n            assignedTo:assignedTo,\r\n            assignedDate:assignedDate,\r\n            assignedBy:assignedBy\r\n        }\r\n        if(props.editDevice){\r\n            updateAlottedDevice(data);\r\n        }\r\n        else{\r\n        assignDevice(data);\r\n        }\r\n        history.push(`/alloted`);\r\n        alert('device assigned')\r\n        window.location.reload(false);\r\n    }\r\n    }\r\n\r\n    const del = () =>{\r\n        delAllotedDevice(props.id);\r\n        alert('device unassigned');\r\n        history.push(`/alloted`);\r\n\r\n    }\r\n    return(\r\n        <div>\r\n            <div>\r\n                Device id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                {props.id}\r\n            </div>\r\n            <div>\r\n                Assigned To&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setAssignedTo(e.target.value)}   value={assignedTo} name=\"Assigned To\" id=\"Assigned To\"  placeholder=\"Assigned To\" />\r\n            </div>\r\n            <div>\r\n                Assigned By&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setAssignedBy(e.target.value)}   value={assignedBy} name=\"assignedBy\" id=\"Assigned By\"  placeholder=\"Assigned By\" />\r\n            </div>\r\n            <div>\r\n                Date Of Assignment&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setAssignDate(e.target.value)}   value={assignedDate} name=\"Date Of Assignment\" id=\"Date Of Assignment\"  placeholder=\"Date Of Assignment\" />\r\n            </div>\r\n            <button onClick={assign}>{props.editDevice?\"Save\":\"Assign Device\"}</button>\r\n            {props.editDevice && <button onClick={del}>{\"Delete\"}</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignDevice;","import React, { useState,useEffect } from 'react';\r\nimport {getDevices,getAssignedDevices} from '../services/services';\r\nimport AssignDevice from './AssignDevice';\r\n\r\nconst AssignDeviceId = (props) => {\r\n    console.log(props.match.params.item)\r\n    const [deviceId,setDeviceId]=useState(props.match.params.item?props.match.params.item:'');\r\n    const [devices,setDevices] = useState();\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [check,setCheck] = useState(false);\r\n    const [editDevice,setEditDevice]=useState();\r\n    useEffect(()=>{\r\n        getDevices().then(res=>setDevices(res));\r\n        getAssignedDevices().then(res=>setAssignedDevices(res))\r\n    },[check,setCheck]);\r\n    useEffect(()=>{\r\n        if(props.match.params.item){\r\n            if(assignedDevices){\r\n                \r\n                const deviceAssigned=assignedDevices.find(device => device[\"id\"]===deviceId);\r\n                if(deviceAssigned)setEditDevice(deviceAssigned);\r\n                else setCheck(true);\r\n            }\r\n        }\r\n    })\r\n    const assignDevice = () =>{\r\n        if(devices){\r\n            const deviceFound=devices.find(device => device.id === deviceId)\r\n          \r\n            if(deviceFound){\r\n                const deviceAssigned=assignedDevices.find(device => device[\"id\"]===deviceId)\r\n                if(!deviceAssigned){\r\n                    setCheck(true)\r\n                }\r\n                else\r\n                alert(\"Device already Assigned\")\r\n            }\r\n            else\r\n            alert('Device not found')\r\n        }\r\n    }\r\n    const assignedSuccessfully = ()=>{\r\n        setCheck(false)\r\n    }\r\n    return(\r\n        <div>\r\n            {!check && !props.match.params.item && <div>Enter the device id of the device\r\n            <input type=\"text\" onChange={(e) => setDeviceId(e.target.value)}   value={deviceId} name=\"Id\" id=\"firstname\"  placeholder=\"Device Id\" />\r\n            <button onClick={assignDevice}>Assign</button></div>\r\n            }\r\n            {\r\n               (editDevice || check) && <div>\r\n                    <AssignDevice id={deviceId} edit={props.match.params.item?true:false} editDevice={props.match.params.item?editDevice:null} assignedSuccessfully={assignedSuccessfully}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignDeviceId;","import React, { useState,useEffect } from 'react';\r\nimport { getAssignedDevices, submitDevice } from '../services/services';\r\n\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nconst SubmitDevice = () => {\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [deviceId,setDeviceId] = useState('');\r\n    const [subDate,setSubDate] = useState('');\r\n    const history = useHistory();\r\n    useEffect(()=>{getAssignedDevices().then(res=>setAssignedDevices(res))},[])\r\n    const submitDvice = () =>{\r\n        if(!deviceId || !subDate ){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n        const findDevice=assignedDevices.find(device=>deviceId===device['id'])\r\n        if(!findDevice){\r\n            alert(\"Device Not Found\");\r\n        }\r\n        else{\r\n        const index=assignedDevices.indexOf(findDevice);\r\n        \r\n        findDevice[\"submitDate\"]=subDate;\r\n        submitDevice(findDevice,index)\r\n        alert(\"Device Submitted\");\r\n            history.push('/inventoryScreen');\r\n        }}\r\n    }\r\n    return(\r\n        <div>\r\n            <div>Enter the device id of the device\r\n            <input type=\"text\" onChange={(e) => setDeviceId(e.target.value)}   value={deviceId} name=\"Id\" id=\"deviceId\"  placeholder=\"Device Id\" />\r\n            </div>\r\n            <div>\r\n                Enter Date of submission\r\n            <input type=\"text\" onChange={(e) => setSubDate(e.target.value)}   value={subDate} name=\"subDate\" id=\"subDate\"  placeholder=\"Submission Date\" />\r\n            <button onClick={submitDvice}>Submit</button></div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubmitDevice;","import React from 'react';\r\n\r\nimport ViewDevices from './ViewDevices';\r\n\r\nconst Devices = () => {\r\n    return(\r\n        <div>\r\n           <ViewDevices/>\r\n        </div>\r\n    )\r\n}\r\nexport default Devices","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices,getAssignedDevices } from '../services/services';\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst AvailableDevices = () => {\r\n    const [devices, setDevices] = useState();\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [availableDevices,setAvailableDevices] = useState();\r\n    useEffect(() => { \r\n        getDevices().then(res => setDevices(res));\r\n        getAssignedDevices().then(res=>setAssignedDevices(res))\r\n    }, [])\r\n    useEffect(()=>{\r\n        const available = []\r\n        if(devices)devices.forEach(element => {\r\n           if(assignedDevices){\r\n            const findDevice=assignedDevices.find(device=>device[\"id\"]===element[\"id\"])\r\n            if(!findDevice){\r\n                 available.push(element);\r\n            }}\r\n        });\r\n        setAvailableDevices(available);\r\n    },[assignedDevices,devices])\r\n    const history = useHistory();\r\n    const assign=(id)=>{\r\n        history.push(`/assignDeviceId/${id}`)\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {availableDevices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        availableDevices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.id}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td onClick={assign.bind(this,nextItem.id)}>Assign</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AvailableDevices;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices,getAssignedDevices } from '../services/services';\r\n\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst AllotedDevices = (props) => {\r\n    \r\n    \r\n    const [devices, setDevices] = useState()\r\n\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [displayedAssignedDevices,setDisplayedAssignedDevices]= useState();\r\n    const[refresh,setRefresh] = useState(props.refresh?props.refresh : false)\r\n    \r\n    const history=useHistory();\r\n\r\n    useEffect(() =>\r\n     { getDevices().then(res => setDevices(res));\r\n        getAssignedDevices().then(res=>setAssignedDevices(res))\r\n     }, []);\r\n\r\n        useEffect(()=>{\r\n            const alloted=[];\r\n            console.log(assignedDevices)\r\n            if(assignedDevices)\r\n            assignedDevices.forEach(element => {\r\n               if(devices){\r\n                const findDevice=devices.find(device => device[\"id\"]=== element[\"id\"])\r\n                if(findDevice){\r\n                    let object ={...element,...findDevice}\r\n                    console.log(object);\r\n                    alloted.push(object);\r\n                }\r\n            }\r\n            });\r\n            setDisplayedAssignedDevices(alloted);\r\n        },[assignedDevices])\r\n        useEffect(()=>{\r\n            if(refresh){\r\n            setRefresh(false)\r\n            window.location.reload(false);}\r\n        },[refresh])\r\n        const editClicked=(item)=>{\r\n            history.push(`/assignDeviceId/${item.id}`)\r\n        }\r\n        \r\n        return (\r\n        <div>\r\n\r\n            {displayedAssignedDevices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Device Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th>Assigned To</th>\r\n                    <th>Assigned By</th>\r\n                    <th>Assigned Date</th>\r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        displayedAssignedDevices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.id}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td>{nextItem.assignedTo}</td>\r\n                                    <td>{nextItem.assignedBy}</td>\r\n                                    <td>{nextItem.assignedDate}</td>\r\n                                    <td onClick={editClicked.bind(this,nextItem)}>edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllotedDevices;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices,getSubmitedDevices, editDevice } from '../services/services';\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst AllotedDevices = () => {\r\n    const [devices, setDevices] = useState()\r\n    const [submittedDevices,setSubmittedDevices] = useState();\r\n    const [displayedSubmittedDevice,setDisplayedSubmittedDevice]=useState();\r\n    useEffect(() =>\r\n     { getDevices().then(res => setDevices(res));\r\n        getSubmitedDevices().then(res=>setSubmittedDevices(res))\r\n     }, []);\r\n\r\n        useEffect(()=>{\r\n            const submitted=[];\r\n            if(submittedDevices)\r\n            submittedDevices.forEach(element => {\r\n                if(devices){\r\n                const findDevice=devices.find(device => device[\"id\"]=== element[\"id\"])\r\n                if(findDevice){\r\n                    let object ={...element,...findDevice}\r\n                    submitted.push(object);\r\n                }}\r\n            });\r\n            setDisplayedSubmittedDevice(submitted);\r\n        },[submittedDevices,devices]);\r\n        const history = useHistory();\r\n        const edit = ( id) => {\r\n            history.push(`/editSubmitDevice/${id}`)\r\n        } \r\n    return (\r\n        <div>\r\n\r\n            {displayedSubmittedDevice && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Device Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th>Assigned To</th>\r\n                    <th>Assigned By</th>\r\n                    <th>Assigned Date</th>\r\n                    <th>Submit Date</th>                \r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        displayedSubmittedDevice.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.id}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td>{nextItem.assignedTo}</td>\r\n                                    <td>{nextItem.assignedBy}</td>\r\n                                    <td>{nextItem.assignedDate}</td>\r\n                                    <td>{nextItem.submitDate}</td>\r\n                                    <td onClick={edit.bind(this,nextItem.id)}>edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllotedDevices;","import React,{useState,useEffect} from 'react';\r\n\r\nimport {editDevice,getDevices,dltDevice} from '../services/services';\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nconst EditDevice = (props) =>{\r\n\r\n    \r\n    const [deviceId,setDeviceId] = useState(props.match.params.item);\r\n    const [deviceSrNo,setDeviceSrNo] = useState('');\r\n    const [deviceName,setDeviceName] = useState('');\r\n    const [deviceType,setDeviceType] = useState('');\r\n    const [devices,setDevices] = useState();\r\n\r\n    const history = useHistory();\r\n    useEffect(() =>\r\n     { getDevices().then(res => setDevices(res));\r\n        \r\n     }, []);\r\n     useEffect(() =>\r\n     { if(devices){\r\n     \r\n         const device=devices.find(dev=>dev[\"id\"]===deviceId);\r\n         console.log(device);\r\n         setDeviceName(device.name);\r\n         setDeviceSrNo(device.srNo);\r\n         setDeviceType(device.type)\r\n     }  }, [devices]);\r\n   \r\n    const editDvice = () => {\r\n        if(!deviceSrNo || !deviceType || !deviceName){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n            const data={id:deviceId,name:deviceName,srNo:deviceSrNo,type:deviceType}\r\n            editDevice(data);\r\n            alert(\"Field Edited\");\r\n            history.push(`/deviceScreen`)\r\n        }\r\n    }\r\n\r\n    const deleteDevice = () =>{\r\n        dltDevice(deviceId);\r\n        alert('device deleted');\r\n        history.push(`/viewDevices`)\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div>\r\n                Device Id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                {deviceId}            </div>\r\n            <div>\r\n                Device Sr. No.&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setDeviceSrNo(e.target.value)}   value={deviceSrNo} name=\"Sr. No.\" id=\"firstname\"  placeholder=\"Device Sr. No.\" />\r\n            </div>\r\n            <div>\r\n                Device Name.&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setDeviceName(e.target.value)}   value={deviceName} name=\"device name\" id=\"devicename\"  placeholder=\"Device Name\" />\r\n            </div>\r\n            <div>\r\n                Device Type &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\" onChange={(e) => setDeviceType(e.target.value)}  value={deviceType} name=\"type\" id=\"device type\"  placeholder=\"Device Type\" />\r\n            </div>\r\n            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button onClick={editDvice}>Save</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <button onClick={deleteDevice}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDevice;","import React, { useState,useEffect } from 'react';\r\nimport { updateSubmitDevice,getSubmitedDevices,delsubmittedDevice } from '../services/services';\r\n\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nconst EditSubmitList = (props) =>{\r\n\r\n    const [assignedTo,setAssignedTo]=useState();\r\n    const [assignedBy,setAssignedBy]=useState();\r\n    const [assignedDate,setAssignDate]=useState();\r\n    const [submitDate,setSubmitDate]=useState();\r\n    const [submitDevice,setSubmitDevice] = useState();\r\n    \r\n  \r\n\r\n    useEffect(() =>\r\n     { getSubmitedDevices().then(res => setSubmitDevice(res));\r\n        \r\n     }, []);\r\n     useEffect(() =>\r\n     { if(submitDevice){\r\n     \r\n         const device=submitDevice.find(dev=>dev[\"id\"]===props.match.params.item);\r\n         \r\n         setAssignedTo(device.assignedTo);\r\n         setAssignDate(device.assignedDate);\r\n         setSubmitDate(device.submitDate);\r\n         setAssignedBy(device.assignedBy);\r\n     }  }, [submitDevice]);\r\n\r\n     const history=useHistory();\r\n    const del = () =>{\r\n        delsubmittedDevice(props.match.params.item);\r\n        alert('deleted')\r\n        history.push(`/inventoryScreen`);\r\n    }\r\n    const save = () =>{\r\n        const object={\r\n            id:props.match.params.item,\r\n            assignedTo:assignedTo,\r\n            assignedDate:assignedDate,\r\n            submitDate:submitDate\r\n        }    \r\n        updateSubmitDevice(object);\r\n        alert('details updated')\r\n        history.push(`/submitted`);\r\n    }\r\n    return(\r\n        <div>\r\n            <div>\r\n                <div>Device id</div>\r\n                <div>{props.match.params.item}</div>\r\n            </div>\r\n            <div>\r\n                <div>Assigned To</div>\r\n                <input type=\"text\" onChange={(e) => setAssignedTo(e.target.value)}   value={assignedTo} name=\"Assigned To\" id=\"Assigned To\"  placeholder=\"Assigned To\" />\r\n            </div>\r\n            <div>\r\n                <div>Assigned By</div>\r\n                <input type=\"text\" onChange={(e) => setAssignedBy(e.target.value)}   value={assignedBy} name=\"assignedBy\" id=\"Assigned By\"  placeholder=\"Assigned By\" />\r\n            </div>\r\n            <div>\r\n                <div>Date Of Assignment</div>\r\n                <input type=\"text\" onChange={(e) => setAssignDate(e.target.value)}   value={assignedDate} name=\"Date Of Assignment\" id=\"Date Of Assignment\"  placeholder=\"Date Of Assignment\" />\r\n            </div>\r\n            <div>\r\n                <div>Date Of Submission</div>\r\n                <input type=\"text\" onChange={(e) => setSubmitDate(e.target.value)}   value={submitDate} name=\"Date Of submission\" id=\"Date Of Submission\"  placeholder=\"Date Of Submission\" />\r\n            </div>\r\n            <button onClick={save}>Save</button>\r\n            <button onClick={del}>Delete</button>\r\n        </div>\r\n    )}\r\n\r\nexport default EditSubmitList;","import React from 'react';\r\n\r\nimport ViewDevices from './ViewDevices';\r\nimport AvailableDevices from './AvailableDevices';\r\nimport{useHistory} from 'react-router-dom';\r\nconst DeviceScreen = () => {\r\n    const history = useHistory();\r\n    const addDevice = () =>{\r\n        history.push(`/addDevice`)\r\n    }\r\n\r\n    const allotDvice = () => {\r\n        history.push(`/assignDeviceId`)\r\n    }\r\n    return(\r\n        <div>\r\n            \r\n            <button onClick={addDevice}>Add a device</button>&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <button onClick={allotDvice}>Allot a device</button><br/><br/>\r\n            <label>View Devices</label><br/>\r\n           <ViewDevices/><br/>\r\n           <br/>\r\n           <label>Available Devices</label><br/>\r\n           <AvailableDevices/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeviceScreen;","import React from 'react';\r\n\r\nimport SubmittedList from './SubmittedList';\r\nimport AllotedDevices from './AllotedDevices';\r\n\r\nimport{useHistory} from 'react-router-dom';\r\nconst InventoryScreen = () => {\r\n    const history = useHistory();\r\n    const submitDevice = () =>{\r\n        history.push(`/submitDevice`)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={submitDevice}>Submit Device</button><br/><br/>\r\n            \r\n            <label>Alloted Devices</label>\r\n             <AllotedDevices/><br/><br/>\r\n             <label>Submitted  Devices</label><br/>\r\n           <SubmittedList/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InventoryScreen;","import React from 'react';\r\nimport {BrowserRouter as Router,Link,Route, Switch} from 'react-router-dom';\r\n\r\nimport Nav from './Nav';\r\n\r\nimport AddDevice from '../components/AddDevice';\r\nimport ViewDevices from '../components/ViewDevices';\r\nimport AssignDeviceId from '../components/AssignDeviceId';\r\nimport SubmitDevice from '../components/SubmitDevice';\r\nimport Devices from '../components/Devices';\r\nimport AvailableDevices  from '../components/AvailableDevices'\r\nimport AllotedDevices from '../components/AllotedDevices';\r\nimport SubmittedList from '../components/SubmittedList';\r\nimport EditDevice from '../components/EditDevice';\r\nimport EditSubmitDevice from '../components/EditSubmitList';\r\nimport DeviceScreen from '../components/DeviceScreen';\r\nimport InventoryScreen from '../components/InventoryScreen';\r\n\r\nconst routes= () =>{\r\n    return(\r\n        <Router>\r\n            <div>\r\n                <Nav>\r\n            <a><Link to='/deviceScreen'>View Devices</Link></a>\r\n            <a><Link to='/inventoryScreen'>View Inventory</Link></a>\r\n            </Nav>\r\n            <Switch>\r\n            <Route exact path='/addDevice' component={AddDevice}></Route>\r\n            <Route exact path='/viewDevices' component={ViewDevices}></Route>\r\n            <Route exact path='/assignDeviceId' component={AssignDeviceId}></Route>\r\n            <Route exact path='/assignDeviceId/:item' component={AssignDeviceId}></Route>\r\n            <Route exact path='/submitDevice' component={SubmitDevice}></Route>\r\n            <Route exact path='/devices' component={Devices}></Route>\r\n            <Route exact path='/available' component={AvailableDevices}></Route>\r\n            <Route exact path='/alloted' component={AllotedDevices}></Route>\r\n            <Route exact path='/submitted' component={SubmittedList}></Route>\r\n            <Route exact path='/editDevice/:item' component={EditDevice}></Route>\r\n            <Route exact path='/editSubmitDevice/:item' component={EditSubmitDevice}></Route>\r\n            <Route exact path='/deviceScreen' component={DeviceScreen}></Route>\r\n            <Route exact path='/inventoryScreen' component={InventoryScreen}></Route>\r\n            </Switch>\r\n            </div>\r\n            </Router>\r\n    )\r\n}\r\n\r\nexport default routes;","import React from 'react';\n\n\nimport Routes from './Routes/Routes'\n\nfunction App() {\n  return (\n    <div >\n        <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}