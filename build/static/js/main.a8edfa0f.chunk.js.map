{"version":3,"sources":["services/services.js","components/AddDeviceInputFields.js","components/AddDevice.js","components/ViewDevices.js","components/AssignDevice.js","components/AssignDeviceId.js","components/SubmitDevice.js","components/Devices.js","components/AvailableDevices.js","components/AllotedDevices.js","components/SubmittedList.js","components/EditDevice.js","Routes/Routes.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["data","lastDeviceId","a","fetch","method","headers","body","JSON","stringify","device","response","getDevices","json","getAssignedDevices","allotDevice","index","subDevice","id","AddDeviceInputField","props","useState","deviceId","setDeviceId","deviceSrNo","setDeviceSrNo","deviceName","setDeviceName","deviceType","setDeviceType","setLastDeviceId","useEffect","getLastDeviceId","then","res","type","onChange","e","target","value","name","placeholder","onClick","srNo","lastId","parseInt","substring","toString","padStart","console","log","addDevice","alert","AddDevice","ViewDetails","devices","setDevices","history","useHistory","editClicked","item","push","map","nextItem","key","bind","this","AssignDevice","assignedTo","setAssignedTo","assignedBy","setAssignedBy","assignedDate","setAssignDate","assignDevice","window","location","reload","AssignDeviceId","assignedDevices","setAssignedDevices","check","setCheck","find","assignedSuccessfully","SubmitDevice","subDate","setSubDate","findDevice","indexOf","submitDevice","Devices","AvailableDevices","availableDevices","setAvailableDevices","available","forEach","element","AllotedDevices","refresh","setRefresh","alloted","object","submittedDevices","setSubmittedDevices","getSubmitedDevices","submitted","submitDate","EditDevice","match","params","dev","editDevice","dltDevice","routes","to","exact","path","component","ViewDevices","SubmittedList","Nav","className","App","Routes","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8edfa0f.chunk.js","sourcesContent":["export async function addDevice(data,lastDeviceId) {\r\n\r\n    const response = await fetch(`/api/addDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({device: data,lastDeviceId:lastDeviceId})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function getDevices() {\r\n\r\n    const response = await fetch('0/api/devices');\r\n    return await response.json();\r\n}\r\n\r\nexport async function getLastDeviceId() {\r\n\r\n    const response = await fetch('/api/getLastId');\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport async function getAssignedDevices() {\r\n\r\n    const response = await fetch('/api/getAssignedDevices');\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport async function assignDevice(device) {\r\n    const response = await fetch(`/api/assignDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({allotDevice:device})\r\n      })\r\n    return await response;\r\n}\r\nexport async function submitDevice(device,index) {\r\n    const response = await fetch(`/api/submitDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({subDevice:device,index:index})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function getSubmitedDevices() {\r\n\r\n    const response = await fetch('/api/getSubmitedDevices');\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport async function editDevice(data){\r\n    const response = await fetch(`/api/updateDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({device:data})\r\n      })\r\n    return await response;\r\n}\r\n\r\nexport async function dltDevice(id){\r\n    const response = await fetch(`/api/deleteDevice`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({id:id})\r\n      })\r\n    return await response;\r\n}","import React,{useState,useEffect} from 'react';\r\n\r\nimport {addDevice,getLastDeviceId} from '../services/services';\r\n\r\n\r\nconst AddDeviceInputField = (props) =>{\r\n\r\n    \r\n    const [deviceId,setDeviceId] = useState();\r\n    const [deviceSrNo,setDeviceSrNo] = useState('');\r\n    const [deviceName,setDeviceName] = useState('');\r\n    const [deviceType,setDeviceType] = useState('');\r\n\r\n    const [lastDeviceId,setLastDeviceId]=useState();\r\n\r\n    useEffect(()=>{getLastDeviceId().then(res=>{\r\n        \r\n        \r\n        setLastDeviceId(res)\r\n        setDeviceId(res)\r\n        \r\n       \r\n    })},[deviceId])\r\n\r\n    const addDvice = () => {\r\n        if(!deviceSrNo || !deviceType || !deviceName){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n        const data={id:lastDeviceId,name:deviceName,srNo:deviceSrNo,type:deviceType}\r\n        let numOfLastId=parseInt(lastDeviceId.substring(1,5))+1;\r\n        const lastId=\"a\"+numOfLastId.toString().padStart(4, \"0\") \r\n        console.log('add')\r\n        addDevice(data,lastId);\r\n        setDeviceId(lastId)\r\n        setDeviceSrNo('');\r\n        setDeviceType('');\r\n        setDeviceName('');\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div>\r\n                <div>Device Id</div>\r\n                <div>{deviceId}</div>\r\n            </div>\r\n            <div>\r\n                <div>Device Sr. No.</div>\r\n                <input type=\"text\" onChange={(e) => setDeviceSrNo(e.target.value)}   value={deviceSrNo} name=\"Sr. No.\" id=\"firstname\"  placeholder=\"Device Sr. No.\" />\r\n            </div>\r\n            <div>\r\n                <div>Device Name.</div>\r\n                <input type=\"text\" onChange={(e) => setDeviceName(e.target.value)}   value={deviceName} name=\"device name\" id=\"devicename\"  placeholder=\"Device Name\" />\r\n            </div>\r\n            <div>\r\n                <div>Device Type</div>\r\n                <input type=\"text\" onChange={(e) => setDeviceType(e.target.value)}  value={deviceType} name=\"type\" id=\"device type\"  placeholder=\"Device Type\" />\r\n            </div>\r\n            <button onClick={addDvice}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddDeviceInputField;","import React, { useState,useEffect } from 'react';\r\nimport AddDeviceInputField from './AddDeviceInputFields'\r\n\r\nconst AddDevice = () =>{\r\n    \r\n    return(\r\n        <div>\r\n            <AddDeviceInputField />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddDevice;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices } from '../services/services';\r\nimport{useHistory} from 'react-router-dom';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst ViewDetails = (props) => {\r\n    const [devices, setDevices] = useState()\r\n    useEffect(() => { getDevices().then(res => setDevices(res)) }, [])\r\n    const history=useHistory();\r\n    const editClicked=(item)=>{\r\n        history.push(`/editDevice/${item.id}`)\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {devices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        devices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.type}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td onClick={editClicked.bind(this,nextItem)}>Edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewDetails;","import React, { useState } from  'react';\r\n\r\nimport {assignDevice} from '../services/services'\r\n\r\nconst AssignDevice = (props) => {\r\n    const [assignedTo,setAssignedTo] =useState('');\r\n    const [assignedBy,setAssignedBy]=useState('')\r\n    const [assignedDate,setAssignDate] =useState('')\r\n    console.log()\r\n    const assign = () =>{\r\n        if(!assignedTo || !assignedBy || !assignedDate){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n        const data={\r\n            id:props.id,\r\n            assignedTo:assignedTo,\r\n            assignedDate:assignedDate,\r\n            assignedBy:assignedBy\r\n        }\r\n        assignDevice(data);\r\n        alert('device assigned')\r\n        window.location.reload(false);\r\n    }\r\n    }\r\n    return(\r\n        <div>\r\n            <div>\r\n                <div>Assigned To</div>\r\n                <input type=\"text\" onChange={(e) => setAssignedTo(e.target.value)}   value={assignedTo} name=\"Assigned To\" id=\"Assigned To\"  placeholder=\"Assigned To\" />\r\n            </div>\r\n            <div>\r\n                <div>Assigned By</div>\r\n                <input type=\"text\" onChange={(e) => setAssignedBy(e.target.value)}   value={assignedBy} name=\"assignedBy\" id=\"Assigned By\"  placeholder=\"Assigned By\" />\r\n            </div>\r\n            <div>\r\n                <div>Date Of Assignment</div>\r\n                <input type=\"text\" onChange={(e) => setAssignDate(e.target.value)}   value={assignedDate} name=\"Date Of Assignment\" id=\"Date Of Assignment\"  placeholder=\"Date Of Assignment\" />\r\n            </div>\r\n            <button onClick={assign}>Assign Device</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignDevice;","import React, { useState,useEffect } from 'react';\r\nimport {getDevices,getAssignedDevices} from '../services/services';\r\nimport AssignDevice from './AssignDevice';\r\n\r\nconst AssignDeviceId = (props) => {\r\n    const [deviceId,setDeviceId]=useState('');\r\n    const [devices,setDevices] = useState();\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [check,setCheck] = useState(false)\r\n    useEffect(()=>{getDevices().then(res=>setDevices(res));getAssignedDevices().then(res=>setAssignedDevices(res))\r\n    },[check,setCheck]);\r\n    const assignDevice = () =>{\r\n        if(devices){\r\n            const deviceFound=devices.find(device => device.id === deviceId)\r\n            if(deviceFound){\r\n                const deviceAssigned=assignedDevices.find(device => device[\"id\"]===deviceId)\r\n                if(!deviceAssigned){\r\n                    setCheck(true)\r\n                }\r\n                else\r\n                alert(\"Device already Assigned\")\r\n            }\r\n            else\r\n            alert('Device not found')\r\n        }\r\n    }\r\n    const assignedSuccessfully = ()=>{\r\n        setCheck(false)\r\n    }\r\n    return(\r\n        <div>\r\n            {!check && <div>Enter the device id of the device\r\n            <input type=\"text\" onChange={(e) => setDeviceId(e.target.value)}   value={deviceId} name=\"Id\" id=\"firstname\"  placeholder=\"Device Id\" />\r\n            <button onClick={assignDevice}>Assign</button></div>\r\n            }\r\n            {\r\n                check && <div>\r\n                    <AssignDevice id={deviceId} assignedSuccessfully={assignedSuccessfully}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignDeviceId;","import React, { useState,useEffect } from 'react';\r\nimport { getAssignedDevices, submitDevice } from '../services/services';\r\n\r\nconst SubmitDevice = () => {\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [deviceId,setDeviceId] = useState('');\r\n    const [subDate,setSubDate] = useState('');\r\n    useEffect(()=>{getAssignedDevices().then(res=>setAssignedDevices(res))},[])\r\n    const submitDvice = () =>{\r\n        if(!deviceId || !subDate ){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n        const findDevice=assignedDevices.find(device=>deviceId===device['id'])\r\n        if(!findDevice){\r\n            alert(\"Device Not Found\");\r\n        }\r\n        else{\r\n        const index=assignedDevices.indexOf(findDevice);\r\n        \r\n        findDevice[\"submitDate\"]=subDate;\r\n        submitDevice(findDevice,index)\r\n        alert(\"Device Submitted\");\r\n        window.location.reload(false);\r\n        }}\r\n    }\r\n    return(\r\n        <div>\r\n            <div>Enter the device id of the device\r\n            <input type=\"text\" onChange={(e) => setDeviceId(e.target.value)}   value={deviceId} name=\"Id\" id=\"deviceId\"  placeholder=\"Device Id\" />\r\n            </div>\r\n            <div>\r\n                Enter Date of submission\r\n            <input type=\"text\" onChange={(e) => setSubDate(e.target.value)}   value={subDate} name=\"subDate\" id=\"subDate\"  placeholder=\"Submission Date\" />\r\n            <button onClick={submitDvice}>Submit</button></div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubmitDevice;","import React from 'react';\r\n\r\nimport ViewDevices from './ViewDevices';\r\n\r\nconst Devices = () => {\r\n    return(\r\n        <div>\r\n           <ViewDevices/>\r\n        </div>\r\n    )\r\n}\r\nexport default Devices","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices,getAssignedDevices } from '../services/services';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst AvailableDevices = () => {\r\n    const [devices, setDevices] = useState();\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n    const [availableDevices,setAvailableDevices] = useState();\r\n    useEffect(() => { \r\n        getDevices().then(res => setDevices(res));\r\n        getAssignedDevices().then(res=>setAssignedDevices(res))\r\n    }, [])\r\n    useEffect(()=>{\r\n        const available = []\r\n        if(devices)devices.forEach(element => {\r\n           if(assignedDevices){\r\n            const findDevice=assignedDevices.find(device=>device[\"id\"]===element[\"id\"])\r\n            if(!findDevice){\r\n                 available.push(element);\r\n            }}\r\n        });\r\n        setAvailableDevices(available);\r\n    },[assignedDevices,devices])\r\n\r\n    return (\r\n        <div>\r\n\r\n            {availableDevices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        availableDevices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.id}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td>edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AvailableDevices;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices,getAssignedDevices } from '../services/services';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst AllotedDevices = (props) => {\r\n    \r\n    \r\n    const [devices, setDevices] = useState()\r\n    const [assignedDevices,setAssignedDevices] = useState();\r\n\r\n    const[refresh,setRefresh] = useState(props.refresh?props.refresh : false)\r\n    useEffect(() =>\r\n     { getDevices().then(res => setDevices(res));\r\n        getAssignedDevices().then(res=>setAssignedDevices(res))\r\n     }, []);\r\n\r\n        useEffect(()=>{\r\n            const alloted=[];\r\n            if(assignedDevices)\r\n            assignedDevices.forEach(element => {\r\n                const findDevice=devices.find(device => device[\"id\"]=== element[\"id\"])\r\n                if(findDevice){\r\n                    let object ={...element,...findDevice}\r\n                    alloted.push(object);\r\n                }\r\n            });\r\n            setAssignedDevices(alloted);\r\n        },[devices])\r\n        useEffect(()=>{\r\n            if(refresh){\r\n            setRefresh(false)\r\n            window.location.reload(false);}\r\n        },[refresh])\r\n        return (\r\n        <div>\r\n\r\n            {assignedDevices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Device Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th>Assigned To</th>\r\n                    <th>Assigned By</th>\r\n                    <th>Assigned Date</th>\r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        assignedDevices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.id}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td>{nextItem.assignedTo}</td>\r\n                                    <td>{nextItem.assignedBy}</td>\r\n                                    <td>{nextItem.assignedDate}</td>\r\n                                    <td>edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllotedDevices;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getDevices,getSubmitedDevices } from '../services/services';\r\n\r\nimport './styles/ViewDevices.css'\r\n\r\nconst AllotedDevices = () => {\r\n    const [devices, setDevices] = useState()\r\n    const [submittedDevices,setSubmittedDevices] = useState();\r\n\r\n    useEffect(() =>\r\n     { getDevices().then(res => setDevices(res));\r\n        getSubmitedDevices().then(res=>setSubmittedDevices(res))\r\n     }, []);\r\n\r\n        useEffect(()=>{\r\n            const submitted=[];\r\n            if(submittedDevices)\r\n            submittedDevices.forEach(element => {\r\n                const findDevice=devices.find(device => device[\"id\"]=== element[\"id\"])\r\n                if(findDevice){\r\n                    let object ={...element,...findDevice}\r\n                    submitted.push(object);\r\n                }\r\n            });\r\n            setSubmittedDevices(submitted);\r\n        },[devices])\r\n    return (\r\n        <div>\r\n\r\n            {submittedDevices && <table>\r\n                <thead><tr>\r\n                    <th>Id</th>\r\n                    <th>Device Sr.No.</th>\r\n                    <th>Name</th>\r\n                    <th>type</th>\r\n                    <th>Assigned To</th>\r\n                    <th>Assigned By</th>\r\n                    <th>Assigned Date</th>\r\n                    <th>Submit Date</th>                \r\n                    <th></th>\r\n                </tr></thead>\r\n                <tbody>\r\n                    {\r\n                        submittedDevices.map(function (nextItem) {\r\n                            return (\r\n                                <tr key={nextItem.id}>\r\n                                    <td>{nextItem.id}</td>\r\n                                    <td>{nextItem.srNo}</td>\r\n                                    <td>{nextItem.type}</td>\r\n                                    <td>{nextItem.name}</td>\r\n                                    <td>{nextItem.assignedTo}</td>\r\n                                    <td>{nextItem.assignedBy}</td>\r\n                                    <td>{nextItem.assignedDate}</td>\r\n                                    <td>{nextItem.submitDate}</td>\r\n                                    <td>edit</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllotedDevices;","import React,{useState,useEffect} from 'react';\r\n\r\nimport {addDevice,editDevice,getDevices,dltDevice} from '../services/services';\r\n\r\n\r\nconst EditDevice = (props) =>{\r\n\r\n    \r\n    const [deviceId,setDeviceId] = useState(props.match.params.item);\r\n    const [deviceSrNo,setDeviceSrNo] = useState('');\r\n    const [deviceName,setDeviceName] = useState('');\r\n    const [deviceType,setDeviceType] = useState('');\r\n    const [devices,setDevices] = useState();\r\n\r\n    \r\n    useEffect(() =>\r\n     { getDevices().then(res => setDevices(res));\r\n     }, []);\r\n     useEffect(() =>\r\n     { if(devices){\r\n         const device=devices.find(dev=>dev[\"id\"]===deviceId);\r\n         setDeviceName(device.deviceName);\r\n         setDeviceSrNo(device.deviceSrNo);\r\n         setDeviceType(device.deviceType)\r\n     }  }, [devices]);\r\n   \r\n    const editDvice = () => {\r\n        if(!deviceSrNo || !deviceType || !deviceName){\r\n            alert(\"Please Fill All details\")\r\n        }\r\n        else{\r\n            const data={id:deviceId,name:deviceName,srNo:deviceSrNo,type:deviceType}\r\n            editDevice(data);\r\n            alert(\"Field Edited\")\r\n        }\r\n    }\r\n\r\n    const deleteDevice = () =>{\r\n        dltDevice(deviceId);\r\n        alert('device deleted')\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div>\r\n                <div>Device Id</div>\r\n                <div>{deviceId}</div>\r\n            </div>\r\n            <div>\r\n                <div>Device Sr. No.</div>\r\n                <input type=\"text\" onChange={(e) => setDeviceSrNo(e.target.value)}   value={deviceSrNo} name=\"Sr. No.\" id=\"firstname\"  placeholder=\"Device Sr. No.\" />\r\n            </div>\r\n            <div>\r\n                <div>Device Name.</div>\r\n                <input type=\"text\" onChange={(e) => setDeviceName(e.target.value)}   value={deviceName} name=\"device name\" id=\"devicename\"  placeholder=\"Device Name\" />\r\n            </div>\r\n            <div>\r\n                <div>Device Type</div>\r\n                <input type=\"text\" onChange={(e) => setDeviceType(e.target.value)}  value={deviceType} name=\"type\" id=\"device type\"  placeholder=\"Device Type\" />\r\n            </div>\r\n            <button onClick={editDvice}>Save</button>\r\n            <button onClick={deleteDevice}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDevice;","import React from 'react';\r\nimport {BrowserRouter as Router,Link,Route, Switch} from 'react-router-dom';\r\n\r\nimport AddDevice from '../components/AddDevice';\r\nimport ViewDevices from '../components/ViewDevices';\r\nimport AssignDeviceId from '../components/AssignDeviceId';\r\nimport SubmitDevice from '../components/SubmitDevice';\r\nimport Devices from '../components/Devices';\r\nimport AvailableDevices  from '../components/AvailableDevices'\r\nimport AllotedDevices from '../components/AllotedDevices';\r\nimport SubmittedList from '../components/SubmittedList';\r\nimport EditDevice from '../components/EditDevice';\r\n\r\nconst routes= () =>{\r\n    return(\r\n        <Router>\r\n            <div>\r\n            <Link to='/addDevice'>Add New Device</Link>{'         '}\r\n            <Link to='/assignDeviceId'>Assign A Device</Link>{'           '}\r\n            <Link to='/submitDevice'>Submit A Device</Link>{'           '}\r\n            <Link to='/viewDevices'>View Devices</Link>{'           '}\r\n            <Link to='/available'>Available Devices</Link>{'           '}\r\n            <Link to='/alloted'>Alloted Devices</Link>{'           '}\r\n            <Link to='/submitted'>Submitted Devices</Link>{'           '}\r\n            <Switch>\r\n            <Route exact path='/addDevice' component={AddDevice}></Route>\r\n            <Route exact path='/viewDevices' component={ViewDevices}></Route>\r\n            <Route exact path='/assignDeviceId' component={AssignDeviceId}></Route>\r\n            <Route exact path='/submitDevice' component={SubmitDevice}></Route>\r\n            <Route exact path='/devices' component={Devices}></Route>\r\n            <Route exact path='/available' component={AvailableDevices}></Route>\r\n            <Route exact path='/alloted' component={AllotedDevices}></Route>\r\n            <Route exact path='/submitted' component={SubmittedList}></Route>\r\n            <Route exact path='/editDevice/:item' component={EditDevice}></Route>\r\n            </Switch>\r\n            </div>\r\n            </Router>\r\n    )\r\n}\r\n\r\nexport default routes;","import React from 'react';\r\nimport {BrowserRouter as Router,Link} from 'react-router-dom';\r\n\r\nimport './styles/Nav.css'\r\nconst Nav = () =>{\r\n    const toAvailableDevice = () => {\r\n        \r\n    }\r\n    return(\r\n        <Router>\r\n        <div className=\"topnav\">\r\n            \r\n            <Link to='/assignDeviceId'>Available Devices</Link>\r\n            <a><Link to='/alloted'>Alloted Devices</Link></a>\r\n            <a>Submitted Devices</a>\r\n            <a>Create New Device</a>\r\n            <a>Assign Device</a>\r\n            <a>Submit Devices</a>\r\n        </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\n\n\nimport Routes from './Routes/Routes'\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <div >\n      <Nav/>\n      <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}